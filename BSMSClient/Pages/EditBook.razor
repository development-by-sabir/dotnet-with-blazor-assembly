@page "/edit-book"
@using BSMSShared.DTO
@using BSMSClient.Services
@inject BookStoreGraphQLService BookStoreService
@inject NavigationManager NavigationManager


<h3>Update Book</h3>
<div class="row">
    <div class="col-lg-2">
        <label>Title</label>
    </div>
    <div class="col-lg-2">
        <input style="width:100%" @bind="book.Title" placeholder="Book title" />
    </div>
</div>
<div class="row">
    <div class="col-lg-2">
        <label>Price</label>
    </div>
    <div class="col-lg-2">
        <input style="width:100%" @bind="book.Price" placeholder="Book price" />
    </div>
</div>
<div class="row">
    <div class="col-lg-2">
        <label>Select Author</label>
    </div>
    <div class="col-lg-2">
        <select @bind="book.AuthorId" class="form-select">
            <option value="">Select Author</option>
            @foreach (var author in authors)
            {
                <option value="@author.Id">@author.Name</option>
            }
        </select>
    </div>
</div>

<button class="btn-primary" @onclick="UpdateBook">Update</button>

@code {
    private BookDto book = new BookDto();
    private List<AuthorDto> authors = new List<AuthorDto>();

    private async Task UpdateBook()
    {
        await BookStoreService.UpdateBookAsync(book);
        NavigationManager.NavigateTo("/books");
    }

    protected override async Task OnInitializedAsync() // NOTE: Make OnInitializedAsync async Task otherwise it will not pre-populate input fields
    {
        authors = await BookStoreService.GetAuthorsAsync();
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (int.TryParse(query["id"], out var id))
        {
            var _book = await BookStoreService.GetBookByIdAsync(id);
            if (_book != null)
                book = _book;
        }
    }
}